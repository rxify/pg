import { createWriteStream } from 'fs';
import { resolve } from 'path';

const bare_label =
    `ABORT_P,ABSENT,ABSOLUTE_P,ACCESS,ACTION,ADD_P,ADMIN,AFTER,AGGREGATE,ALL,ALSO,ALTER,ALWAYS,ANALYSE,ANALYZE,AND,ANY,ASC,ASENSITIVE,ASSERTION,ASSIGNMENT,ASYMMETRIC,AT,ATOMIC,ATTACH,ATTRIBUTE,AUTHORIZATION,BACKWARD,BEFORE,BEGIN_P,BETWEEN,BIGINT,BINARY,BIT,BOOLEAN_P,BOTH,BREADTH,BY,CACHE,CALL,CALLED,CASCADE,CASCADED,CASE,CAST,CATALOG_P,CHAIN,CHARACTERISTICS,CHECK,CHECKPOINT,CLASS,CLOSE,CLUSTER,COALESCE,COLLATE,COLLATION,COLUMN,COLUMNS,COMMENT,COMMENTS,COMMIT,COMMITTED,COMPRESSION,CONCURRENTLY,CONDITIONAL,CONFIGURATION,CONFLICT,CONNECTION,CONSTRAINT,CONSTRAINTS,CONTENT_P,CONTINUE_P,CONVERSION_P,COPY,COST,CROSS,CSV,CUBE,CURRENT_P,CURRENT_CATALOG,CURRENT_DATE,CURRENT_ROLE,CURRENT_SCHEMA,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_USER,CURSOR,CYCLE,DATA_P,DATABASE,DEALLOCATE,DEC,DECIMAL_P,DECLARE,DEFAULT,DEFAULTS,DEFERRABLE,DEFERRED,DEFINER,DELETE_P,DELIMITER,DELIMITERS,DEPENDS,DEPTH,DESC,DETACH,DICTIONARY,DISABLE_P,DISCARD,DISTINCT,DO,DOCUMENT_P,DOMAIN_P,DOUBLE_P,DROP,EACH,ELSE,EMPTY_P,ENABLE_P,ENCODING,ENCRYPTED,END_P,ENUM_P,ERROR_P,ESCAPE,EVENT,EXCLUDE,EXCLUDING,EXCLUSIVE,EXECUTE,EXISTS,EXPLAIN,EXPRESSION,EXTENSION,EXTERNAL,EXTRACT,FALSE_P,FAMILY,FINALIZE,FIRST_P,FLOAT_P,FOLLOWING,FORCE,FOREIGN,FORMAT,FORWARD,FREEZE,FULL,FUNCTION,FUNCTIONS,GENERATED,GLOBAL,GRANTED,GREATEST,GROUPING,GROUPS,HANDLER,HEADER_P,HOLD,IDENTITY_P,IF_P,ILIKE,IMMEDIATE,IMMUTABLE,IMPLICIT_P,IMPORT_P,IN_P,INCLUDE,INCLUDING,INCREMENT,INDENT,INDEX,INDEXES,INHERIT,INHERITS,INITIALLY,INLINE_P,INNER_P,INOUT,INPUT_P,INSENSITIVE,INSERT,INSTEAD,INT_P,INTEGER,INTERVAL,INVOKER,IS,ISOLATION,JOIN,JSON,JSON_ARRAY,JSON_ARRAYAGG,JSON_EXISTS,JSON_OBJECT,JSON_OBJECTAGG,JSON_QUERY,JSON_SCALAR,JSON_SERIALIZE,JSON_TABLE,JSON_VALUE,KEEP,KEY,KEYS,LABEL,LANGUAGE,LARGE_P,LAST_P,LATERAL_P,LEADING,LEAKPROOF,LEAST,LEFT,LEVEL,LIKE,LISTEN,LOAD,LOCAL,LOCALTIME,LOCALTIMESTAMP,LOCATION,LOCK_P,LOCKED,LOGGED,MAPPING,MATCH,MATCHED,MATERIALIZED,MAXVALUE,MERGE,MERGE_ACTION,METHOD,MINVALUE,MODE,MOVE,NAME_P,NAMES,NATIONAL,NATURAL,NCHAR,NESTED,NEW,NEXT,NFC,NFD,NFKC,NFKD,NO,NONE,NORMALIZE,NORMALIZED,NOT,NOTHING,NOTIFY,NOWAIT,NULL_P,NULLIF,NULLS_P,NUMERIC,OBJECT_P,OF,OFF,OIDS,OLD,OMIT,ONLY,OPERATOR,OPTION,OPTIONS,OR,ORDINALITY,OTHERS,OUT_P,OUTER_P,OVERLAY,OVERRIDING,OWNED,OWNER,PARALLEL,PARAMETER,PARSER,PARTIAL,PARTITION,PARTITIONS,PASSING,PASSWORD,PATH,PLACING,PLAN,PLANS,POLICY,POSITION,PRECEDING,PREPARE,PREPARED,PRESERVE,PRIMARY,PRIOR,PRIVILEGES,PROCEDURAL,PROCEDURE,PROCEDURES,PROGRAM,PUBLICATION,QUOTE,QUOTES,RANGE,READ,REAL,REASSIGN,RECHECK,RECURSIVE,REF_P,REFERENCES,REFERENCING,REFRESH,REINDEX,RELATIVE_P,RELEASE,RENAME,REPEATABLE,REPLACE,REPLICA,RESET,RESTART,RESTRICT,RETURN,RETURNS,REVOKE,RIGHT,ROLE,ROLLBACK,ROLLUP,ROUTINE,ROUTINES,ROW,ROWS,RULE,SAVEPOINT,SCALAR,SCHEMA,SCHEMAS,SCROLL,SEARCH,SECURITY,SELECT,SEQUENCE,SEQUENCES,SERIALIZABLE,SERVER,SESSION,SESSION_USER,SET,SETOF,SETS,SHARE,SHOW,SIMILAR,SIMPLE,SKIP,SMALLINT,SNAPSHOT,SOME,SOURCE,SPLIT,SQL_P,STABLE,STANDALONE_P,START,STATEMENT,STATISTICS,STDIN,STDOUT,STORAGE,STORED,STRICT_P,STRING_P,STRIP_P,SUBSCRIPTION,SUBSTRING,SUPPORT,SYMMETRIC,SYSID,SYSTEM_P,SYSTEM_USER,TABLE,TABLES,TABLESAMPLE,TABLESPACE,TARGET,TEMP,TEMPLATE,TEMPORARY,TEXT_P,THEN,TIES,TIME,TIMESTAMP,TRAILING,TRANSACTION,TRANSFORM,TREAT,TRIGGER,TRIM,TRUE_P,TRUNCATE,TRUSTED,TYPE_P,TYPES_P,UESCAPE,UNBOUNDED,UNCOMMITTED,UNCONDITIONAL,UNENCRYPTED,UNIQUE,UNKNOWN,UNLISTEN,UNLOGGED,UNTIL,UPDATE,USER,USING,VACUUM,VALID,VALIDATE,VALIDATOR,VALUE_P,VALUES,VARCHAR,VARIADIC,VERBOSE,VERSION_P,VIEW,VIEWS,VOLATILE,WHEN,WHITESPACE_P,WORK,WRAPPER,WRITE,XML_P,XMLATTRIBUTES,XMLCONCAT,XMLELEMENT,XMLEXISTS,XMLFOREST,XMLNAMESPACES,XMLPARSE,XMLPI,XMLROOT,XMLSERIALIZE,XMLTABLE,YES_P,ZONE`.split(
        /,/g
    );
const col_name =
    `BETWEEN,BIGINT,BIT,BOOLEAN_P,CHAR_P,CHARACTER,COALESCE,DEC,DECIMAL_P,EXISTS,EXTRACT,FLOAT_P,GREATEST,GROUPING,INOUT,INT_P,INTEGER,INTERVAL,JSON,JSON_ARRAY,JSON_ARRAYAGG,JSON_EXISTS,JSON_OBJECT,JSON_OBJECTAGG,JSON_QUERY,JSON_SCALAR,JSON_SERIALIZE,JSON_TABLE,JSON_VALUE,LEAST,MERGE_ACTION,NATIONAL,NCHAR,NONE,NORMALIZE,NULLIF,NUMERIC,OUT_P,OVERLAY,POSITION,PRECISION,REAL,ROW,SETOF,SMALLINT,SUBSTRING,TIME,TIMESTAMP,TREAT,TRIM,VALUES,VARCHAR,XMLATTRIBUTES,XMLCONCAT,XMLELEMENT,XMLEXISTS,XMLFOREST,XMLNAMESPACES,XMLPARSE,XMLPI,XMLROOT,XMLSERIALIZE,XMLTABLE`.split(
        /,/g
    );
const reserved =
    `ALL,ANALYSE,ANALYZE,AND,ANY,ARRAY,AS,ASC,ASYMMETRIC,BOTH,CASE,CAST,CHECK,COLLATE,COLUMN,CONSTRAINT,CREATE,CURRENT_CATALOG,CURRENT_DATE,CURRENT_ROLE,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_USER,DEFAULT,DEFERRABLE,DESC,DISTINCT,DO,ELSE,END_P,EXCEPT,FALSE_P,FETCH,FOR,FOREIGN,FROM,GRANT,GROUP_P,HAVING,IN_P,INITIALLY,INTERSECT,INTO,LATERAL_P,LEADING,LIMIT,LOCALTIME,LOCALTIMESTAMP,NOT,NULL_P,OFFSET,ON,ONLY,OR,ORDER,PLACING,PRIMARY,REFERENCES,RETURNING,SELECT,SESSION_USER,SOME,SYMMETRIC,SYSTEM_USER,TABLE,THEN,TO,TRAILING,TRUE_P,UNION,UNIQUE,USER,USING,VARIADIC,WHEN,WHERE,WINDOW,WITH`.split(
        /,/g
    );
const type_func_name =
    `AUTHORIZATION,BINARY,COLLATION,CONCURRENTLY,CROSS,CURRENT_SCHEMA,FREEZE,FULL,ILIKE,INNER_P,IS,ISNULL,JOIN,LEFT,LIKE,NATURAL,NOTNULL,OUTER_P,OVERLAPS,RIGHT,SIMILAR,TABLESAMPLE,VERBOSE`.split(
        /,/g
    );
const unreserved =
    `ABORT_P,ABSENT,ABSOLUTE_P,ACCESS,ACTION,ADD_P,ADMIN,AFTER,AGGREGATE,ALSO,ALTER,ALWAYS,ASENSITIVE,ASSERTION,ASSIGNMENT,AT,ATOMIC,ATTACH,ATTRIBUTE,BACKWARD,BEFORE,BEGIN_P,BREADTH,BY,CACHE,CALL,CALLED,CASCADE,CASCADED,CATALOG_P,CHAIN,CHARACTERISTICS,CHECKPOINT,CLASS,CLOSE,CLUSTER,COLUMNS,COMMENT,COMMENTS,COMMIT,COMMITTED,COMPRESSION,CONDITIONAL,CONFIGURATION,CONFLICT,CONNECTION,CONSTRAINTS,CONTENT_P,CONTINUE_P,CONVERSION_P,COPY,COST,CSV,CUBE,CURRENT_P,CURSOR,CYCLE,DATA_P,DATABASE,DAY_P,DEALLOCATE,DECLARE,DEFAULTS,DEFERRED,DEFINER,DELETE_P,DELIMITER,DELIMITERS,DEPENDS,DEPTH,DETACH,DICTIONARY,DISABLE_P,DISCARD,DOCUMENT_P,DOMAIN_P,DOUBLE_P,DROP,EACH,EMPTY_P,ENABLE_P,ENCODING,ENCRYPTED,ENUM_P,ERROR_P,ESCAPE,EVENT,EXCLUDE,EXCLUDING,EXCLUSIVE,EXECUTE,EXPLAIN,EXPRESSION,EXTENSION,EXTERNAL,FAMILY,FILTER,FINALIZE,FIRST_P,FOLLOWING,FORCE,FORMAT,FORWARD,FUNCTION,FUNCTIONS,GENERATED,GLOBAL,GRANTED,GROUPS,HANDLER,HEADER_P,HOLD,HOUR_P,IDENTITY_P,IF_P,IMMEDIATE,IMMUTABLE,IMPLICIT_P,IMPORT_P,INCLUDE,INCLUDING,INCREMENT,INDENT,INDEX,INDEXES,INHERIT,INHERITS,INLINE_P,INPUT_P,INSENSITIVE,INSERT,INSTEAD,INVOKER,ISOLATION,KEEP,KEY,KEYS,LABEL,LANGUAGE,LARGE_P,LAST_P,LEAKPROOF,LEVEL,LISTEN,LOAD,LOCAL,LOCATION,LOCK_P,LOCKED,LOGGED,MAPPING,MATCH,MATCHED,MATERIALIZED,MAXVALUE,MERGE,METHOD,MINUTE_P,MINVALUE,MODE,MONTH_P,MOVE,NAME_P,NAMES,NESTED,NEW,NEXT,NFC,NFD,NFKC,NFKD,NO,NORMALIZED,NOTHING,NOTIFY,NOWAIT,NULLS_P,OBJECT_P,OF,OFF,OIDS,OLD,OMIT,OPERATOR,OPTION,OPTIONS,ORDINALITY,OTHERS,OVER,OVERRIDING,OWNED,OWNER,PARALLEL,PARAMETER,PARSER,PARTIAL,PARTITION,PARTITIONS,PASSING,PASSWORD,PATH,PLAN,PLANS,POLICY,PRECEDING,PREPARE,PREPARED,PRESERVE,PRIOR,PRIVILEGES,PROCEDURAL,PROCEDURE,PROCEDURES,PROGRAM,PUBLICATION,QUOTE,QUOTES,RANGE,READ,REASSIGN,RECHECK,RECURSIVE,REF_P,REFERENCING,REFRESH,REINDEX,RELATIVE_P,RELEASE,RENAME,REPEATABLE,REPLACE,REPLICA,RESET,RESTART,RESTRICT,RETURN,RETURNS,REVOKE,ROLE,ROLLBACK,ROLLUP,ROUTINE,ROUTINES,ROWS,RULE,SAVEPOINT,SCALAR,SCHEMA,SCHEMAS,SCROLL,SEARCH,SECOND_P,SECURITY,SEQUENCE,SEQUENCES,SERIALIZABLE,SERVER,SESSION,SET,SETS,SHARE,SHOW,SIMPLE,SKIP,SNAPSHOT,SOURCE,SPLIT,SQL_P,STABLE,STANDALONE_P,START,STATEMENT,STATISTICS,STDIN,STDOUT,STORAGE,STORED,STRICT_P,STRING_P,STRIP_P,SUBSCRIPTION,SUPPORT,SYSID,SYSTEM_P,TABLES,TABLESPACE,TARGET,TEMP,TEMPLATE,TEMPORARY,TEXT_P,TIES,TRANSACTION,TRANSFORM,TRIGGER,TRUNCATE,TRUSTED,TYPE_P,TYPES_P,UESCAPE,UNBOUNDED,UNCOMMITTED,UNCONDITIONAL,UNENCRYPTED,UNKNOWN,UNLISTEN,UNLOGGED,UNTIL,UPDATE,VACUUM,VALID,VALIDATE,VALIDATOR,VALUE_P,VARYING,VERSION_P,VIEW,VIEWS,VOLATILE,WHITESPACE_P,WITHIN,WITHOUT,WORK,WRAPPER,WRITE,XML_P,YEAR_P,YES_P,ZONE`.split(
        /,/g
    );

const writeStream = createWriteStream(
    resolve('src', 'keywords', 'keywords.ts')
);

const BARE_LABEL = {
    name: 'BARE_LABEL',
    kws: bare_label,
    doc: `/**
 * While all keywords can be used as column labels when preceded by AS,
 * not all of them can be used as a "bare" column label without AS.
 * Those that can be used as a bare label must be listed here,
 * in addition to appearing in one of the category lists above.
 *
 * Always add a new keyword to this list if possible.  Mark it BARE_LABEL
 * in kwlist.h if it is included here, or AS_LABEL if it is not.
 */`
};

const COL_NAME = {
    name: 'COL_NAME',
    kws: col_name,
    doc: `/**
 * Column identifier --- keywords that can be column, table, etc names.
 *
 * Many of these keywords will in fact be recognized as type or function
 * names too; but they have special productions for the purpose, and so
 * can't be treated as "generic" type or function names.
 *
 * The type names appearing here are not usable as function names
 * because they can be followed by '(' in typename productions, which
 * looks too much like a function call for an LR(1) parser.
 */`
};

const RESERVED = {
    name: 'RESERVED',
    kws: reserved,
    doc: `/**
 * Reserved keyword --- these keywords are usable only as a ColLabel.
 *
 * Keywords appear here if they could not be distinguished from variable,
 * type, or function names in some contexts.  Don't put things here unless
 * forced to.
 */`
};

const TYPE_FUNC_NAME = {
    name: 'TYPE_FUNC_NAME',
    kws: type_func_name,
    doc: `/**
 * Type/function identifier --- keywords that can be type or function names.
 *
 * Most of these are keywords that are used as operators in expressions;
 * in general such keywords can't be column names because they would be
 * ambiguous with variables, but they are unambiguous as function identifiers.
 *
 * Do not include POSITION, SUBSTRING, etc here since they have explicit
 * productions in a_expr to support the goofy SQL9x argument syntax.
 * - thomas 2000-11-28
 */`
};

const UNRESERVED = {
    name: 'UNRESERVED',
    kws: unreserved,
    doc: `/**
 * "Unreserved" keywords --- available for use as any kind of name.
 */`
};

[RESERVED, UNRESERVED, COL_NAME, TYPE_FUNC_NAME, BARE_LABEL].forEach(
    (kw, i) => {
        writeStream.write(kw.doc + '\n');
        writeStream.write(`export const ${kw.name} = {\n`);
        kw.kws.forEach((kw, j) => {
            let id = 1000 * (i + 1) + j;
            writeStream.write(`\t${kw}: ${id},\n`);
        });
        writeStream.write('}\n\n');
    }
);
