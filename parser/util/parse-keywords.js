import { writeFileSync } from 'fs';

const kw = `PG_KEYWORD('abort', ABORT_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('absent', ABSENT, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('absolute', ABSOLUTE_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('access', ACCESS, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('action', ACTION, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('add', ADD_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('admin', ADMIN, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('after', AFTER, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('aggregate', AGGREGATE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('all', ALL, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('also', ALSO, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('alter', ALTER, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('always', ALWAYS, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('analyse', ANALYSE, KEYWORD.RESERVED, BARE_LABEL); /* British spelling */
PG_KEYWORD('analyze', ANALYZE, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('and', AND, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('any', ANY, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('array', ARRAY, KEYWORD.RESERVED, AS_LABEL);
PG_KEYWORD('as', AS, KEYWORD.RESERVED, AS_LABEL);
PG_KEYWORD('asc', ASC, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('asensitive', ASENSITIVE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('assertion', ASSERTION, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('assignment', ASSIGNMENT, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('asymmetric', ASYMMETRIC, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('at', AT, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('atomic', ATOMIC, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('attach', ATTACH, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('attribute', ATTRIBUTE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('authorization',AUTHORIZATION, KEYWORD.TYPE_FUNC_NAME, BARE_LABEL);
PG_KEYWORD('backward', BACKWARD, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('before', BEFORE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('begin', BEGIN_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('between', BETWEEN, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('bigint', BIGINT, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('binary', BINARY, KEYWORD.TYPE_FUNC_NAME, BARE_LABEL);
PG_KEYWORD('bit', BIT, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('boolean', BOOLEAN_P, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('both', BOTH, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('breadth', BREADTH, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('by', BY, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('cache', CACHE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('call', CALL, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('called', CALLED, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('cascade', CASCADE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('cascaded', CASCADED, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('case', CASE, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('cast', CAST, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('catalog', CATALOG_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('chain', CHAIN, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('char', CHAR_P, KEYWORD.COL_NAME, AS_LABEL);
PG_KEYWORD('character', CHARACTER, KEYWORD.COL_NAME, AS_LABEL);
PG_KEYWORD('characteristics',CHARACTERISTICS,KEYWORD.UNRESERVED,BARE_LABEL);
PG_KEYWORD('check', CHECK, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('checkpoint', CHECKPOINT, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('class', CLASS, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('close', CLOSE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('cluster', CLUSTER, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('coalesce', COALESCE, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('collate', COLLATE, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('collation', COLLATION, KEYWORD.TYPE_FUNC_NAME, BARE_LABEL);
PG_KEYWORD('column', COLUMN, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('columns', COLUMNS, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('comment', COMMENT, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('comments', COMMENTS, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('commit', COMMIT, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('committed', COMMITTED, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('compression', COMPRESSION, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('concurrently', CONCURRENTLY, KEYWORD.TYPE_FUNC_NAME, BARE_LABEL);
PG_KEYWORD('conditional', CONDITIONAL, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('configuration', CONFIGURATION, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('conflict', CONFLICT, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('connection', CONNECTION, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('constraint', CONSTRAINT, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('constraints', CONSTRAINTS, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('content', CONTENT_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('continue', CONTINUE_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('conversion', CONVERSION_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('copy', COPY, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('cost', COST, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('create', CREATE, KEYWORD.RESERVED, AS_LABEL);
PG_KEYWORD('cross', CROSS, KEYWORD.TYPE_FUNC_NAME, BARE_LABEL);
PG_KEYWORD('csv', CSV, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('cube', CUBE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('current', CURRENT_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('current_catalog', CURRENT_CATALOG, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('current_date', CURRENT_DATE, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('current_role', CURRENT_ROLE, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('current_schema',CURRENT_SCHEMA,KEYWORD.TYPE_FUNC_NAME,BARE_LABEL);
PG_KEYWORD('current_time', CURRENT_TIME, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('current_timestamp',CURRENT_TIMESTAMP,KEYWORD.RESERVED,BARE_LABEL);
PG_KEYWORD('current_user', CURRENT_USER, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('cursor', CURSOR, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('cycle', CYCLE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('data', DATA_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('database', DATABASE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('day', DAY_P, KEYWORD.UNRESERVED, AS_LABEL);
PG_KEYWORD('deallocate', DEALLOCATE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('dec', DEC, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('decimal', DECIMAL_P, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('declare', DECLARE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('default', DEFAULT, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('defaults', DEFAULTS, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('deferrable', DEFERRABLE, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('deferred', DEFERRED, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('definer', DEFINER, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('delete', DELETE_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('delimiter', DELIMITER, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('delimiters', DELIMITERS, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('depends', DEPENDS, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('depth', DEPTH, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('desc', DESC, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('detach', DETACH, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('dictionary', DICTIONARY, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('disable', DISABLE_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('discard', DISCARD, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('distinct', DISTINCT, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('do', DO, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('document', DOCUMENT_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('domain', DOMAIN_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('double', DOUBLE_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('drop', DROP, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('each', EACH, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('else', ELSE, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('empty', EMPTY_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('enable', ENABLE_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('encoding', ENCODING, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('encrypted', ENCRYPTED, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('end', END_P, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('enum', ENUM_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('error', ERROR_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('escape', ESCAPE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('event', EVENT, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('except', EXCEPT, KEYWORD.RESERVED, AS_LABEL);
PG_KEYWORD('exclude', EXCLUDE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('excluding', EXCLUDING, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('exclusive', EXCLUSIVE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('execute', EXECUTE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('exists', EXISTS, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('explain', EXPLAIN, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('expression', EXPRESSION, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('extension', EXTENSION, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('external', EXTERNAL, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('extract', EXTRACT, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('false', FALSE_P, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('family', FAMILY, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('fetch', FETCH, KEYWORD.RESERVED, AS_LABEL);
PG_KEYWORD('filter', FILTER, KEYWORD.UNRESERVED, AS_LABEL);
PG_KEYWORD('finalize', FINALIZE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('first', FIRST_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('float', FLOAT_P, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('following', FOLLOWING, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('for', FOR, KEYWORD.RESERVED, AS_LABEL);
PG_KEYWORD('force', FORCE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('foreign', FOREIGN, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('format', FORMAT, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('forward', FORWARD, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('freeze', FREEZE, KEYWORD.TYPE_FUNC_NAME, BARE_LABEL);
PG_KEYWORD('from', FROM, KEYWORD.RESERVED, AS_LABEL);
PG_KEYWORD('full', FULL, KEYWORD.TYPE_FUNC_NAME, BARE_LABEL);
PG_KEYWORD('function', FUNCTION, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('functions', FUNCTIONS, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('generated', GENERATED, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('global', GLOBAL, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('grant', GRANT, KEYWORD.RESERVED, AS_LABEL);
PG_KEYWORD('granted', GRANTED, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('greatest', GREATEST, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('group', GROUP_P, KEYWORD.RESERVED, AS_LABEL);
PG_KEYWORD('grouping', GROUPING, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('groups', GROUPS, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('handler', HANDLER, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('having', HAVING, KEYWORD.RESERVED, AS_LABEL);
PG_KEYWORD('header', HEADER_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('hold', HOLD, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('hour', HOUR_P, KEYWORD.UNRESERVED, AS_LABEL);
PG_KEYWORD('identity', IDENTITY_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('if', IF_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('ilike', ILIKE, KEYWORD.TYPE_FUNC_NAME, BARE_LABEL);
PG_KEYWORD('immediate', IMMEDIATE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('immutable', IMMUTABLE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('implicit', IMPLICIT_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('import', IMPORT_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('in', IN_P, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('include', INCLUDE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('including', INCLUDING, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('increment', INCREMENT, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('indent', INDENT, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('index', INDEX, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('indexes', INDEXES, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('inherit', INHERIT, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('inherits', INHERITS, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('initially', INITIALLY, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('inline', INLINE_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('inner', INNER_P, KEYWORD.TYPE_FUNC_NAME, BARE_LABEL);
PG_KEYWORD('inout', INOUT, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('input', INPUT_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('insensitive', INSENSITIVE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('insert', INSERT, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('instead', INSTEAD, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('int', INT_P, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('integer', INTEGER, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('intersect', INTERSECT, KEYWORD.RESERVED, AS_LABEL);
PG_KEYWORD('interval', INTERVAL, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('into', INTO, KEYWORD.RESERVED, AS_LABEL);
PG_KEYWORD('invoker', INVOKER, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('is', IS, KEYWORD.TYPE_FUNC_NAME, BARE_LABEL);
PG_KEYWORD('isnull', ISNULL, KEYWORD.TYPE_FUNC_NAME, AS_LABEL);
PG_KEYWORD('isolation', ISOLATION, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('join', JOIN, KEYWORD.TYPE_FUNC_NAME, BARE_LABEL);
PG_KEYWORD('json', JSON, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('json_array', JSON_ARRAY, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('json_arrayagg', JSON_ARRAYAGG, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('json_exists', JSON_EXISTS, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('json_object', JSON_OBJECT, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('json_objectagg', JSON_OBJECTAGG, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('json_query', JSON_QUERY, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('json_scalar', JSON_SCALAR, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('json_serialize', JSON_SERIALIZE, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('json_table', JSON_TABLE, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('json_value', JSON_VALUE, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('keep', KEEP, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('key', KEY, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('keys', KEYS, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('label', LABEL, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('language', LANGUAGE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('large', LARGE_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('last', LAST_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('lateral', LATERAL_P, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('leading', LEADING, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('leakproof', LEAKPROOF, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('least', LEAST, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('left', LEFT, KEYWORD.TYPE_FUNC_NAME, BARE_LABEL);
PG_KEYWORD('level', LEVEL, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('like', LIKE, KEYWORD.TYPE_FUNC_NAME, BARE_LABEL);
PG_KEYWORD('limit', LIMIT, KEYWORD.RESERVED, AS_LABEL);
PG_KEYWORD('listen', LISTEN, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('load', LOAD, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('local', LOCAL, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('localtime', LOCALTIME, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('localtimestamp', LOCALTIMESTAMP, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('location', LOCATION, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('lock', LOCK_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('locked', LOCKED, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('logged', LOGGED, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('mapping', MAPPING, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('match', MATCH, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('matched', MATCHED, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('materialized', MATERIALIZED, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('maxvalue', MAXVALUE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('merge', MERGE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('merge_action', MERGE_ACTION, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('method', METHOD, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('minute', MINUTE_P, KEYWORD.UNRESERVED, AS_LABEL);
PG_KEYWORD('minvalue', MINVALUE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('mode', MODE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('month', MONTH_P, KEYWORD.UNRESERVED, AS_LABEL);
PG_KEYWORD('move', MOVE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('name', NAME_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('names', NAMES, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('national', NATIONAL, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('natural', NATURAL, KEYWORD.TYPE_FUNC_NAME, BARE_LABEL);
PG_KEYWORD('nchar', NCHAR, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('nested', NESTED, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('new', NEW, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('next', NEXT, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('nfc', NFC, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('nfd', NFD, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('nfkc', NFKC, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('nfkd', NFKD, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('no', NO, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('none', NONE, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('normalize', NORMALIZE, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('normalized', NORMALIZED, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('not', NOT, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('nothing', NOTHING, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('notify', NOTIFY, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('notnull', NOTNULL, KEYWORD.TYPE_FUNC_NAME, AS_LABEL);
PG_KEYWORD('nowait', NOWAIT, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('null', NULL_P, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('nullif', NULLIF, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('nulls', NULLS_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('numeric', NUMERIC, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('object', OBJECT_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('of', OF, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('off', OFF, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('offset', OFFSET, KEYWORD.RESERVED, AS_LABEL);
PG_KEYWORD('oids', OIDS, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('old', OLD, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('omit', OMIT, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('on', ON, KEYWORD.RESERVED, AS_LABEL);
PG_KEYWORD('only', ONLY, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('operator', OPERATOR, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('option', OPTION, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('options', OPTIONS, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('or', OR, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('order', ORDER, KEYWORD.RESERVED, AS_LABEL);
PG_KEYWORD('ordinality', ORDINALITY, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('others', OTHERS, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('out', OUT_P, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('outer', OUTER_P, KEYWORD.TYPE_FUNC_NAME, BARE_LABEL);
PG_KEYWORD('over', OVER, KEYWORD.UNRESERVED, AS_LABEL);
PG_KEYWORD('overlaps', OVERLAPS, KEYWORD.TYPE_FUNC_NAME, AS_LABEL);
PG_KEYWORD('overlay', OVERLAY, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('overriding', OVERRIDING, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('owned', OWNED, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('owner', OWNER, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('parallel', PARALLEL, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('parameter', PARAMETER, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('parser', PARSER, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('partial', PARTIAL, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('partition', PARTITION, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('partitions', PARTITIONS, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('passing', PASSING, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('password', PASSWORD, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('path', PATH, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('placing', PLACING, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('plan', PLAN, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('plans', PLANS, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('policy', POLICY, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('position', POSITION, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('preceding', PRECEDING, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('precision', PRECISION, KEYWORD.COL_NAME, AS_LABEL);
PG_KEYWORD('prepare', PREPARE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('prepared', PREPARED, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('preserve', PRESERVE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('primary', PRIMARY, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('prior', PRIOR, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('privileges', PRIVILEGES, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('procedural', PROCEDURAL, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('procedure', PROCEDURE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('procedures', PROCEDURES, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('program', PROGRAM, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('publication', PUBLICATION, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('quote', QUOTE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('quotes', QUOTES, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('range', RANGE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('read', READ, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('real', REAL, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('reassign', REASSIGN, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('recheck', RECHECK, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('recursive', RECURSIVE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('ref', REF_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('references', REFERENCES, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('referencing', REFERENCING, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('refresh', REFRESH, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('reindex', REINDEX, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('relative', RELATIVE_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('release', RELEASE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('rename', RENAME, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('repeatable', REPEATABLE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('replace', REPLACE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('replica', REPLICA, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('reset', RESET, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('restart', RESTART, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('restrict', RESTRICT, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('return', RETURN, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('returning', RETURNING, KEYWORD.RESERVED, AS_LABEL);
PG_KEYWORD('returns', RETURNS, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('revoke', REVOKE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('right', RIGHT, KEYWORD.TYPE_FUNC_NAME, BARE_LABEL);
PG_KEYWORD('role', ROLE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('rollback', ROLLBACK, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('rollup', ROLLUP, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('routine', ROUTINE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('routines', ROUTINES, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('row', ROW, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('rows', ROWS, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('rule', RULE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('savepoint', SAVEPOINT, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('scalar', SCALAR, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('schema', SCHEMA, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('schemas', SCHEMAS, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('scroll', SCROLL, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('search', SEARCH, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('second', SECOND_P, KEYWORD.UNRESERVED, AS_LABEL);
PG_KEYWORD('security', SECURITY, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('select', SELECT, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('sequence', SEQUENCE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('sequences', SEQUENCES, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('serializable', SERIALIZABLE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('server', SERVER, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('session', SESSION, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('session_user', SESSION_USER, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('set', SET, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('setof', SETOF, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('sets', SETS, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('share', SHARE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('show', SHOW, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('similar', SIMILAR, KEYWORD.TYPE_FUNC_NAME, BARE_LABEL);
PG_KEYWORD('simple', SIMPLE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('skip', SKIP, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('smallint', SMALLINT, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('snapshot', SNAPSHOT, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('some', SOME, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('source', SOURCE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('split', SPLIT, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('sql', SQL_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('stable', STABLE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('standalone', STANDALONE_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('start', START, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('statement', STATEMENT, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('statistics', STATISTICS, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('stdin', STDIN, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('stdout', STDOUT, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('storage', STORAGE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('stored', STORED, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('strict', STRICT_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('string', STRING_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('strip', STRIP_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('subscription', SUBSCRIPTION, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('substring', SUBSTRING, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('support', SUPPORT, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('symmetric', SYMMETRIC, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('sysid', SYSID, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('system', SYSTEM_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('system_user', SYSTEM_USER, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('table', TABLE, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('tables', TABLES, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('tablesample', TABLESAMPLE, KEYWORD.TYPE_FUNC_NAME, BARE_LABEL);
PG_KEYWORD('tablespace', TABLESPACE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('target', TARGET, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('temp', TEMP, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('template', TEMPLATE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('temporary', TEMPORARY, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('text', TEXT_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('then', THEN, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('ties', TIES, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('time', TIME, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('timestamp', TIMESTAMP, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('to', TO, KEYWORD.RESERVED, AS_LABEL);
PG_KEYWORD('trailing', TRAILING, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('transaction', TRANSACTION, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('transform', TRANSFORM, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('treat', TREAT, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('trigger', TRIGGER, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('trim', TRIM, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('true', TRUE_P, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('truncate', TRUNCATE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('trusted', TRUSTED, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('type', TYPE_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('types', TYPES_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('uescape', UESCAPE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('unbounded', UNBOUNDED, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('uncommitted', UNCOMMITTED, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('unconditional', UNCONDITIONAL, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('unencrypted', UNENCRYPTED, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('union', UNION, KEYWORD.RESERVED, AS_LABEL);
PG_KEYWORD('unique', UNIQUE, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('unknown', UNKNOWN, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('unlisten', UNLISTEN, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('unlogged', UNLOGGED, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('until', UNTIL, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('update', UPDATE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('user', USER, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('using', USING, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('vacuum', VACUUM, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('valid', VALID, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('validate', VALIDATE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('validator', VALIDATOR, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('value', VALUE_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('values', VALUES, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('varchar', VARCHAR, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('variadic', VARIADIC, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('varying', VARYING, KEYWORD.UNRESERVED, AS_LABEL);
PG_KEYWORD('verbose', VERBOSE, KEYWORD.TYPE_FUNC_NAME, BARE_LABEL);
PG_KEYWORD('version', VERSION_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('view', VIEW, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('views', VIEWS, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('volatile', VOLATILE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('when', WHEN, KEYWORD.RESERVED, BARE_LABEL);
PG_KEYWORD('where', WHERE, KEYWORD.RESERVED, AS_LABEL);
PG_KEYWORD('whitespace', WHITESPACE_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('window', WINDOW, KEYWORD.RESERVED, AS_LABEL);
PG_KEYWORD('with', WITH, KEYWORD.RESERVED, AS_LABEL);
PG_KEYWORD('within', WITHIN, KEYWORD.UNRESERVED, AS_LABEL);
PG_KEYWORD('without', WITHOUT, KEYWORD.UNRESERVED, AS_LABEL);
PG_KEYWORD('work', WORK, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('wrapper', WRAPPER, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('write', WRITE, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('xml', XML_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('xmlattributes', XMLATTRIBUTES, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('xmlconcat', XMLCONCAT, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('xmlelement', XMLELEMENT, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('xmlexists', XMLEXISTS, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('xmlforest', XMLFOREST, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('xmlnamespaces', XMLNAMESPACES, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('xmlparse', XMLPARSE, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('xmlpi', XMLPI, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('xmlroot', XMLROOT, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('xmlserialize', XMLSERIALIZE, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('xmltable', XMLTABLE, KEYWORD.COL_NAME, BARE_LABEL);
PG_KEYWORD('year', YEAR_P, KEYWORD.UNRESERVED, AS_LABEL);
PG_KEYWORD('yes', YES_P, KEYWORD.UNRESERVED, BARE_LABEL);
PG_KEYWORD('zone', ZONE, KEYWORD.UNRESERVED, BARE_LABEL);`;

const map = {
    BARE_LABEL: 'bare_label_keyword',
    UNRESERVED: 'unreserved_keyword',
    RESERVED: 'reserved_keyword',
    TYPE_FUNC_NAME: 'type_func_name_keyword',
    COL_NAME: 'col_name_keyword'
};

const keywords = kw.split(/\n/g).map((row) => {
    const [fn, args, end] = row.split(/\)|\(/g);
    const [nm, type, enum_type, bare_label] = args.split(/,\s{0,}/g);

    if (!enum_type) {
        throw new SyntaxError(
            `Expected enum_type for ${row}, received ${enum_type}`
        );
    }

    const [kw, ns] = enum_type.split(/\./g);

    if (!map[ns]) {
        throw new SyntaxError(
            `Expected BARE_LABEL | UNRESERVED | RESERVED | TYPE_FUNC_NAME | COL_NAME for ${row}, received ${ns}.`
        );
    }
    const mapped = map[ns] + '.' + type;

    return `${fn}(${nm},${mapped},${enum_type},${bare_label})${end}`;
});

writeFileSync('mappedKeywords.ts', keywords.join('\n'));
